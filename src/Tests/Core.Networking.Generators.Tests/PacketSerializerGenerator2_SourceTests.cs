using FluentAssertions;
using FluentAssertions.Equivalency;
using QuantumCore.Networking;
using Xunit;

namespace Core.Networking.Generators.Tests;

public class PacketSerializerGenerator2_SourceTests
{
    private PacketTypeInfo _basicServerToClient = new PacketTypeInfo("QuantumCore.Networking", "TestPacket")
    {
        Fields = [
            new PacketFieldInfo2
            {
                Name = "Id",
                TypeFullName = typeof(uint).FullName!,
                ElementSize = 4
            }
        ],
        FixedSize = 5,
        Header = 0x44,
        IsServerToClient = true
    };
    private PacketTypeInfo _basicClientToServer = new PacketTypeInfo("QuantumCore.Networking", "TestPacket")
    {
        Fields = [
            new PacketFieldInfo2
            {
                Name = "Id",
                TypeFullName = typeof(uint).FullName!,
                ElementSize = 4
            }
        ],
        FixedSize = 5,
        Header = 0x44,
        IsClientToServer = true
    };

    private static EquivalencyOptions<string> SourceCompare(EquivalencyOptions<string> arg)
    {
        arg.IgnoringNewlineStyle();
        arg.IgnoringTrailingWhitespace();
        arg.IgnoringLeadingWhitespace();
        return arg;
    }

    [Fact]
    public void _GenerateHeader_ServerToClient()
    {
        PacketSourceGenerator.GenerateHeader(_basicServerToClient).Should().BeEquivalentTo("""
            /// <auto-generated/>
            #pragma warning disable CS8019 // Unnecessary using directive
            using System.Buffers;
            using System.IO;
            using System.Text;

            namespace QuantumCore.Networking;

            public partial struct TestPacket : IServerToClientPacket
            {
            """, SourceCompare);
    }

    [Fact]
    public void _GenerateHeader_ClientToServer()
    {
        PacketSourceGenerator.GenerateHeader(_basicClientToServer).Should().BeEquivalentTo("""
            /// <auto-generated/>
            #pragma warning disable CS8019 // Unnecessary using directive
            using System.Buffers;
            using System.IO;
            using System.Text;

            namespace QuantumCore.Networking;

            public partial struct TestPacket : IClientToServerPacket
            {
            """, SourceCompare);
    }

    [Fact]
    public void _GenerateWriteHeader()
    {
        PacketSourceGenerator.GenerateWriteHeader(_basicServerToClient).Should().BeEquivalentTo(
            """
                public void Write(Stream stream)
                {
                    var buffer = ArrayPool<byte>.Shared.Rent(5);
                    buffer[0] = 0x44;
            """, SourceCompare);
    }

    [Fact]
    public void _GenerateWriteFooter()
    {
        PacketSourceGenerator.GenerateWriteFooter(_basicServerToClient).Should().BeEquivalentTo("""
                    stream.Write(buffer, 0, 5);
                    ArrayPool<byte>.Shared.Return(buffer);
                }
            """, SourceCompare);
    }

    [Fact]
    public void _GenerateFooter()
    {
        PacketSourceGenerator.GenerateFooter(new PacketTypeInfo("QuantumCore.Networking", "TestPacket"))
            .Should().BeEquivalentTo("}", SourceCompare);
    }

    [Fact]
    public void _GenerateLines_uint()
    {
        var index = 0;
        PacketSourceGenerator.GenerateLines(ref index, new PacketFieldInfo2
        {
            Name = "Id",
            TypeFullName = typeof(uint).FullName!,
            ElementSize = 4
        }).Should().BeEquivalentTo("""
                                           buffer[0] = (byte) (Id >> 0);
                                           buffer[1] = (byte) (Id >> 8);
                                           buffer[2] = (byte) (Id >> 16);
                                           buffer[3] = (byte) (Id >> 24);
                                   """, SourceCompare);
        index.Should().Be(4);
    }

    [Fact]
    public void _GenerateLines_ushort()
    {
        var index = 0;
        PacketSourceGenerator.GenerateLines(ref index, new PacketFieldInfo2
        {
            Name = "Id",
            TypeFullName = typeof(ushort).FullName!,
            ElementSize = 2
        }).Should().BeEquivalentTo("""
                                           buffer[0] = (byte) (Id >> 0);
                                           buffer[1] = (byte) (Id >> 8);
                                   """, SourceCompare);
        index.Should().Be(2);
    }

    [Fact]
    public void _GenerateLines_String_Fixed()
    {
        var index = 0;
        PacketSourceGenerator.GenerateLines(ref index, new PacketFieldInfo2
        {
            Name = "Message",
            TypeFullName = typeof(string).FullName!,
            ElementSize = 2
        }).Should().BeEquivalentTo("        Encoding.ASCII.GetBytes(Message, 0, 2, buffer, 0);", SourceCompare);
        index.Should().Be(2);
    }

    [Fact]
    public void _GenerateLines_Array_Fixed_Byte()
    {
        var index = 0;
        PacketSourceGenerator.GenerateLines(ref index, new PacketFieldInfo2
        {
            Name = "Message",
            TypeFullName = typeof(Array).FullName!,
            ElementTypeFullName = typeof(byte).FullName,
            IsArray = true,
            ArrayLength = 2,
            ElementSize = 1
        }).Should().BeEquivalentTo("        Message.CopyTo(buffer, 0, 2);", SourceCompare);
        index.Should().Be(2);
    }

    [Fact]
    public void _GenerateLines_Array_Fixed_Int()
    {
        var index = 0;
        PacketSourceGenerator.GenerateLines(ref index, new PacketFieldInfo2
        {
            Name = "Data",
            TypeFullName = typeof(Array).FullName!,
            ElementTypeFullName = typeof(int).FullName,
            IsArray = true,
            ArrayLength = 2,
            ElementSize = 4
        }).Should().BeEquivalentTo("""
                                           for (var i = 0; i < 2; i++)
                                           {
                                               buffer[i * 4 + 0] = (byte) (Data[i] >> 0);
                                               buffer[i * 4 + 1] = (byte) (Data[i] >> 8);
                                               buffer[i * 4 + 2] = (byte) (Data[i] >> 16);
                                               buffer[i * 4 + 3] = (byte) (Data[i] >> 24);
                                           }
                                   """, SourceCompare);
        index.Should().Be(8);
    }

    [Fact]
    public void _GenerateLines_ulong()
    {
        var index = 0;
        PacketSourceGenerator.GenerateLines(ref index, new PacketFieldInfo2
        {
            Name = "Id",
            TypeFullName = typeof(ulong).FullName!,
            ElementSize = 8
        }).Should().BeEquivalentTo("""
                                           buffer[0] = (byte) (Id >> 0);
                                           buffer[1] = (byte) (Id >> 8);
                                           buffer[2] = (byte) (Id >> 16);
                                           buffer[3] = (byte) (Id >> 24);
                                           buffer[4] = (byte) (Id >> 32);
                                           buffer[5] = (byte) (Id >> 40);
                                           buffer[6] = (byte) (Id >> 48);
                                           buffer[7] = (byte) (Id >> 54);
                                   """, SourceCompare);
        index.Should().Be(8);
    }

    [Fact]
    public void _GenerateLines_byte()
    {
        var index = 0;
        PacketSourceGenerator.GenerateLines(ref index, new PacketFieldInfo2
        {
            Name = "Id",
            TypeFullName = typeof(byte).FullName!,
            ElementSize = 1
        }).Should().BeEquivalentTo("        buffer[0] = (byte) Id;", SourceCompare);
        index.Should().Be(1);
    }

    [Fact]
    public void _GenerateLines_Enum()
    {
        var index = 0;
        PacketSourceGenerator.GenerateLines(ref index, new PacketFieldInfo2
        {
            Name = "Id",
            ElementTypeFullName = "ushort",
            IsEnum = true,
            ElementSize = 2
        }).Should().BeEquivalentTo("""
                                           buffer[0] = (byte) ((ushort)Id >> 0);
                                           buffer[1] = (byte) ((ushort)Id >> 8);
                                   """, SourceCompare);
        index.Should().Be(2);
    }

    [Fact]
    public void _GenerateLines_bool()
    {
        var index = 0;
        PacketSourceGenerator.GenerateLines(ref index, new PacketFieldInfo2
        {
            Name = "Id",
            TypeFullName = typeof(bool).FullName!,
            ElementSize = 1
        }).Should().BeEquivalentTo("        buffer[0] = (byte) (Id ? 1 : 0);", SourceCompare);
        index.Should().Be(1);
    }

    [Fact]
    public void ServerToClient()
    {
        PacketSourceGenerator.Generate(_basicServerToClient)
            .Should()
            .BeEquivalentTo("""
                            /// <auto-generated/>
                            #pragma warning disable CS8019 // Unnecessary using directive
                            using System.Buffers;
                            using System.IO;
                            using System.Text;
                            
                            namespace QuantumCore.Networking;

                            public partial struct TestPacket : IServerToClientPacket
                            {
                                public void Write(Stream stream)
                                {
                                    var buffer = ArrayPool<byte>.Shared.Rent(5);
                                    buffer[0] = 0x44;
                                    buffer[1] = (byte) (Id >> 0);
                                    buffer[2] = (byte) (Id >> 8);
                                    buffer[3] = (byte) (Id >> 16);
                                    buffer[4] = (byte) (Id >> 24);

                                    stream.Write(buffer, 0, 5);
                                    ArrayPool<byte>.Shared.Return(buffer);
                                }
                            }
                            """, SourceCompare);
    }

    [Fact]
    public void ClientToServer()
    {
        PacketSourceGenerator.Generate(_basicClientToServer)
            .Should()
            .BeEquivalentTo("""
                            /// <auto-generated/>
                            #pragma warning disable CS8019 // Unnecessary using directive
                            using System.Buffers;
                            using System.IO;
                            using System.Text;
                            
                            namespace QuantumCore.Networking;

                            public partial struct TestPacket : IClientToServerPacket
                            {
                                public void Read(Stream stream)
                                {
                                }
                            }
                            """, SourceCompare);
    }

    [Fact]
    public void FixedSize_String()
    {
        PacketSourceGenerator.Generate(new PacketTypeInfo("QuantumCore.Networking", "TestPacket")
            {
                Fields =
                [
                    new PacketFieldInfo2 {Name = "Message", TypeFullName = typeof(string).FullName!, ElementSize = 4}
                ],
                FixedSize = 5,
                Header = 0x44,
                IsServerToClient = true,
            })
            .Should()
            .BeEquivalentTo("""
                            /// <auto-generated/>
                            #pragma warning disable CS8019 // Unnecessary using directive
                            using System.Buffers;
                            using System.IO;
                            using System.Text;
                            
                            namespace QuantumCore.Networking;

                            public partial struct TestPacket : IServerToClientPacket
                            {
                                public void Write(Stream stream)
                                {
                                    var buffer = ArrayPool<byte>.Shared.Rent(5);
                                    buffer[0] = 0x44;
                                    Encoding.ASCII.GetBytes(Message, 0, 4, buffer, 1);

                                    stream.Write(buffer, 0, 5);
                                    ArrayPool<byte>.Shared.Return(buffer);
                                }
                            }
                            """, SourceCompare);
    }
}
