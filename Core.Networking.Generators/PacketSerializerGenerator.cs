using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace QuantumCore.Networking;

[Generator]
public class PacketSerializerGenerator : ISourceGenerator
{
    private SerializeGenerator _serializeGenerator = null!;
    private DeserializeGenerator _deserializeGenerator = null!;
    private GeneratorContext _generatorContext = null!;

    public void Execute(GeneratorExecutionContext context)
    {
        _generatorContext = new GeneratorContext(context);
        _serializeGenerator = new SerializeGenerator(_generatorContext);
        _deserializeGenerator = new DeserializeGenerator(_generatorContext);
        foreach (var pair in _generatorContext.TypesToGenerateFor)
        {
            try
            {
                var (name, source) = GenerateFile(pair.Value.TypeDeclaration, pair.Value.TypeDeclaration.SyntaxTree);

                context.AddSource($"{name}.g.cs", SourceText.From(source, Encoding.UTF8));
            }
            catch (DiagnosticException e)
            {
                context.ReportDiagnostic(e.Diagnostic);
            }
            catch (Exception e)
            {
                context.ReportDiagnostic(Diagnostic.Create(
                    new DiagnosticDescriptor(
                        "QCX-G000001",
                        "Failed to generate packet serializer",
                        "Type {0} is setup incorrectly. Exception: {1} => {2}",
                        "generators",
                        DiagnosticSeverity.Error,
                        true), pair.Value.TypeDeclaration.GetLocation(), pair.Value.TypeDeclaration.Identifier.Text,
                    e.GetType(), e.Message));
            }
        }
    }

    private (string Name, string Source) GenerateFile(TypeDeclarationSyntax type, SyntaxTree tree)
    {
        var name = type.Identifier.Text;
        var ns = tree.GetRoot().DescendantNodes().OfType<BaseNamespaceDeclarationSyntax>().First()?.Name.ToString()!;
        var typeKeyWords = GeneratorContext.GetTypeKeyWords(type);

        var source = new StringBuilder();
        ApplyHeader(source, typeKeyWords, ns, name);
        
        var dynamicByteIndex = new StringBuilder();
        source.Append(_serializeGenerator.Generate(type, dynamicByteIndex));
        
        source.AppendLine();
        
        dynamicByteIndex = new StringBuilder();
        source.Append(_deserializeGenerator.Generate(type, dynamicByteIndex.ToString()));

        ApplyFooter(source);
        return (name, source.ToString());
    }

    private static void ApplyFooter(StringBuilder source)
    {
        source.AppendLine("    }");
        source.Append("}");
    }

    // TODO deserialize

    public void Initialize(GeneratorInitializationContext context)
    {
    }

    private static void ApplyHeader(StringBuilder sb, string typeKeywords, string ns, string name)
    {
        sb.AppendLine($@"/// <auto-generated/>
using QuantumCore.Networking;

namespace {ns} {{

    public partial {typeKeywords} {name} : IPacketSerializable
    {{");
    }
}